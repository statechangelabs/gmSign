/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "CantBeEvil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CantBeEvil__factory>;
    getContractFactory(
      name: "ICantBeEvil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICantBeEvil__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC2981",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2981__factory>;
    getContractFactory(
      name: "ERC2981",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2981__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetadataURI__factory>;
    getContractFactory(
      name: "Signable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Signable__factory>;
    getContractFactory(
      name: "TermReader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TermReader__factory>;
    getContractFactory(
      name: "TermsableBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TermsableBase__factory>;
    getContractFactory(
      name: "TermsableNoToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TermsableNoToken__factory>;
    getContractFactory(
      name: "NonEvilToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonEvilToken__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;

    getContractAt(
      name: "CantBeEvil",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CantBeEvil>;
    getContractAt(
      name: "ICantBeEvil",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICantBeEvil>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC2981",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2981>;
    getContractAt(
      name: "ERC2981",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2981>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetadataURI>;
    getContractAt(
      name: "Signable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Signable>;
    getContractAt(
      name: "TermReader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TermReader>;
    getContractAt(
      name: "TermsableBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TermsableBase>;
    getContractAt(
      name: "TermsableNoToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TermsableNoToken>;
    getContractAt(
      name: "NonEvilToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonEvilToken>;
    getContractAt(
      name: "Lock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
