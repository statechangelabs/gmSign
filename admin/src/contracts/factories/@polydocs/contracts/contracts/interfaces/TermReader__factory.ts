/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  TermReader,
  TermReaderInterface,
} from "../../../../../@polydocs/contracts/contracts/interfaces/TermReader";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "_renderer",
        type: "string",
      },
    ],
    name: "GlobalRendererChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "_template",
        type: "string",
      },
    ],
    name: "GlobalTemplateChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "_term",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "_value",
        type: "bytes32",
      },
    ],
    name: "GlobalTermChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_term",
        type: "string",
      },
    ],
    name: "globalTerm",
    outputs: [
      {
        internalType: "string",
        name: "_value",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class TermReader__factory {
  static readonly abi = _abi;
  static createInterface(): TermReaderInterface {
    return new utils.Interface(_abi) as TermReaderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TermReader {
    return new Contract(address, _abi, signerOrProvider) as TermReader;
  }
}
